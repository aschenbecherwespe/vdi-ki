 2/1: test = [1,2,3,4]
 2/2: test[:1]
 3/1: import minio
 3/2: client = minio.Minio('localhost:9000')
 3/3:
with open('P1.png', 'b') as infile:
    client.put_object('test.png', infile.read())
 3/4:
with open('P1.png', 'rb') as infile:
    client.put_object('test.png', infile.read())
 3/5:
with open('P1.png', 'rb') as infile:
    client.put_object('images', 'test.png', infile.read())
 3/6:
with open('P1.png', 'rb') as infile:
    data = infile.read()
    client.put_object('images', 'test.png', data, len(data))
 3/7:
with open('P1.png', 'rb') as infile:
    data = infile.read()
    infile.seek(0)
    client.put_object('images', 'test.png', infile, len(data))
 3/8: client = minio.Minio('localhost:9000', 'minioadmin', 'minioadmin')
 3/9:
with open('P1.png', 'rb') as infile:
    data = infile.read()
    infile.seek(0)
    client.put_object('images', 'test.png', infile, len(data))
3/10: client = minio.Minio('http://localhost:9000', 'minioadmin', 'minioadmin')
3/11: client = minio.Minio('http://localhost:9000/', 'minioadmin', 'minioadmin')
3/12: client = minio.Minio('localhost:9000/', 'minioadmin', 'minioadmin', secure=False)
3/13:
with open('P1.png', 'rb') as infile:
    data = infile.read()
    infile.seek(0)
    client.put_object('images', 'test.png', infile, len(data))
3/14: import influxdb_client
 4/1: import influxdb_client
 5/1: import influxdb_client
 5/2:
bucket="predictions"
org="vdi"
token="Dm_E_p6wLWxO2st-pefO7YEqLusl938By2zhbM9YmRTx2omBtw2X7-CcbI6jh1LTQ_6e0YylPZZsP5Hz_X5Dfw=="
url="http://localhost:8086"
 5/3: from influxdb_client.client.write_api import SYNCHRONOUS
 5/4: p = influxdb_client.Point("measurement").field('hello', 25.3)
 5/5: write_api.write(bucket=bucket, org=org, record=p)
 5/6: write_api = client.write_api(write_options=SYNCHRONOUS)
 5/7: client = influxdb_client.InfluxDBClient( url=url, token=token, org=org)
 5/8: write_api = client.write_api(write_options=SYNCHRONOUS)
 5/9: p = influxdb_client.Point("measurement").field('hello', "world").field('value', 3.14)
5/10: write_api.write(bucket=bucket, org=org, record=p)
5/11: res = write_api.write(bucket=bucket, org=org, record=p)
5/12: res
 6/1:
from qt_gl_preview import *
from picamera2 import *
import time

picam2 = Picamera2()
preview = QtGlPreview(picam2)

preview_config = picam2.preview_configuration()
picam2.configure(preview_config)

picam2.start()
time.sleep(5)
 7/1:
from picamera2 import *

picam2 = Picamera2()
 8/1:
from picamera2 import *

picam2 = Picamera2()
 9/1:
import sys
print(sys.path)
10/1:
#!/usr/bin/python3

# Normally the QtGlPreview implementation is recommended as it benefits
# from GPU hardware acceleration.

from qt_gl_preview import *
from picamera2 import *
import time

picam2 = Picamera2()
preview = QtGlPreview(picam2)

preview_config = picam2.preview_configuration()
picam2.configure(preview_config)

picam2.start()
time.sleep(5)
10/2:
#!/usr/bin/python3

# Normally the QtGlPreview implementation is recommended as it benefits
# from GPU hardware acceleration.

from qt_gl_preview import *
from picamera2 import *
import time

picam2 = Picamera2()
preview = QtGlPreview(picam2)

preview_config = picam2.preview_configuration()
picam2.configure(preview_config)

picam2.start()
time.sleep(5)
   1:

from qt_gl_preview import *
from picamera2 import *
import time

picam2 = Picamera2()
preview = QtGlPreview(picam2)

preview_config = picam2.preview_configuration()
capture_config = picam2.still_configuration()
picam2.configure(preview_config)

picam2.start()
time.sleep(2)

image = picam2.switch_mode_and_capture_image(capture_config)
   2: image
   3:
def crop_square(im):
    width, height = im.size   # Get dimensions

    # lets take the shorter side of image and crop to that
    new_longest = min(width, height) 

    left = (width - new_longest)/2
    top = (height - new_longest)/2
    right = (width + new_longest)/2
    bottom = (height + new_longest)/2

    # Crop the center of the image
    im = im.crop((left, top, right, bottom))

    return im
   4: squared = crop_square(image)
   5: squared.size
   6:
import PIL
maxsize = (416, 416)

resized = squared.thumbnail(maxsize, PIL.Image.ANTIALIAS)
resized.size
   7: squared
   8: squared.size
   9: squared.shape
  10: squared
  11: no_alpha = squared.convert("RGB")
  12: no_alpha
  13: import numpy as np
  14: arr = np.array(no_alpha)
  15: arr.shape
  16: arr[0]
  17:
img_path = '/home/pi/ScaledYOLOv4/P1.png'
img = cv2.imread(img_path)
  18: import cv2
  19:
img_path = '/home/pi/ScaledYOLOv4/P1.png'
img = cv2.imread(img_path)
  20: img
  21: img.shape
  22: image_bytes = cv2.imencode('.jpg', arr)[1].tobytes()
  23:
with open('out.jpg', 'wb') as outfile:
    outfile.write(image_bytes)
  24: arr = np.array(no_alpha)[:, :, ::-1]
  25:
with open('out.jpg', 'wb') as outfile:
    outfile.write(image_bytes)
  26: image_bytes = cv2.imencode('.jpg', arr)[1].tobytes()
  27:
with open('out.jpg', 'wb') as outfile:
    outfile.write(image_bytes)
  28: picam2.stop()
  29: %history -g -f scratchpad.ipython
